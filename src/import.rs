pub use {
    anyhow::{bail, Result},
    humantime::format_duration,
    once_cell::sync::OnceCell,
    rand::seq::SliceRandom,
    serde_json::{json, Value},
    serenity::{
        async_trait,
        client::{Client, Context, EventHandler},
        framework::{
            standard::{
                help_commands,
                macros::{command, group, help, hook},
                Args, CommandGroup, CommandResult, HelpOptions,
            },
            StandardFramework,
        },
        http::Http,
        model::{
            channel::Message,
            gateway::Ready,
            guild::Guild,
            id::{ChannelId, RoleId, UserId},
            misc::Mentionable,
        },
        prelude::{TypeMap, TypeMapKey},
        Result as SerenityResult,
    },
    songbird::{
        create_player,
        driver::{CryptoMode, DecodeMode},
        id::ChannelId as VoiceChannelId,
        input::{restartable::Restartable, Codec, Input},
        tracks::{PlayMode, TrackHandle},
        Call, Config, CoreEvent, Event, EventContext, EventHandler as VoiceEventHandler,
        SerenityInit, Songbird, TrackEvent,
    },
    std::{
        collections::{HashMap, HashSet},
        env,
        io::Read,
        path::Path,
        process::{Command, Stdio},
        sync::{Arc, Mutex},
        time::Duration,
    },
    tokio::sync::RwLock,
    url::Url,
    wait_timeout::ChildExt,
    youtube_dl::{YoutubeDl, YoutubeDlOutput},
};
